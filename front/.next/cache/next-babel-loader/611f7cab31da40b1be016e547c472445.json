{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  return axios.post(\"/api/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // 액션을 dispatch\n            type: \"LOG_IN_SUCCESS\",\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","call","delay","fork","put","takeLatest","axios","logInAPI","data","post","action","type","result","response","logOutAPI"],"mappings":";;oDAQUA,K;qDAwBAC,M;qDAiBAC,U;qDAKAC,W;qDAGeC,Q;;AAzDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CAFsB,CAEiB;AACxC;;AAED,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAOI,iBAAME,GAAG,CAAC;AACR;AACAO,YAAAA,IAAI,EAAE,gBAFE;AAGRH,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHL,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaI,iBAAMJ,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAE,gBADE;AAERH,YAAAA,IAAI,EAAE,YAAEK,QAAF,CAAWL;AAFT,WAAD,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASM,SAAT,GAAqB;AACnB,SAAOR,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUb,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAKI,iBAAME,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAE,iBADE;AAERH,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMJ,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAE,iBADE;AAERH,YAAAA,IAAI,EAAE,aAAEK,QAAF,CAAWL;AAFT,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAAC,gBAAD,EAAmBV,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAAC,iBAAD,EAAoBT,MAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACN,UAAD,CAAL,EAAmBM,IAAI,CAACL,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  return axios.post(\"/api/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 액션을 받음\r\n  try {\r\n    // const result = yield call(logInAPI, action.data); // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\r\n    yield delay(1000);\r\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\r\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  // 로그아웃은 데이터 받을 필요 없음\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n  // 액션이 들어오면 logIn 제너레이터 함수를 실행, 요청이 들어오면 두번재 인자 함수에 액션을 넘김\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}