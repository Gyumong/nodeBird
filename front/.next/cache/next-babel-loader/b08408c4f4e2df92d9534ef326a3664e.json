{"ast":null,"code":"/** @format */\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\n\nfunction followApi() {\n  return axios.post(\"/api/follow\");\n}\n\nfunction unfollowApi() {\n  return axios.post(\"/api/unfollow\");\n}\n\nfunction logInAPI(data) {\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  return axios.post(\"/api/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction* logIn(action) {\n  // 액션을 받음\n  try {\n    // const result = yield call(logInAPI, action.data); // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\n    yield delay(1000); // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\n\n    yield put({\n      // 액션을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  // 로그아웃은 데이터 받을 필요 없음\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"http://localhost:3080/user\");\n}\n\nfunction* signUp() {\n  try {\n    const result = yield call(signUpAPI);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 액션이 들어오면 logIn 제너레이터 함수를 실행, 요청이 들어오면 두번재 인자 함수에 액션을 넘김\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","followApi","post","unfollowApi","logInAPI","data","logIn","action","type","e","error","response","logOutAPI","logOut","signUpAPI","signUp","result","follow","unfollow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from \"../reducers/user\";\r\nfunction followApi() {\r\n  return axios.post(\"/api/follow\");\r\n}\r\nfunction unfollowApi() {\r\n  return axios.post(\"/api/unfollow\");\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  return axios.post(\"/api/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 액션을 받음\r\n  try {\r\n    // const result = yield call(logInAPI, action.data); // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\r\n    yield delay(1000);\r\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\r\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  // 로그아웃은 데이터 받을 필요 없음\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post(\"http://localhost:3080/user\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    const result = yield call(signUpAPI);\r\n\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* follow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n  // 액션이 들어오면 logIn 제너레이터 함수를 실행, 요청이 들어오면 두번재 인자 함수에 액션을 넘김\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}