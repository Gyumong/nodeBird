{"ast":null,"code":"/** @format */\nimport React from \"react\";\nimport produce from \"immer\";\nexport var init = {\n  mainPosts: [],\n  imagesPaths: [],\n  hasMorePosts: true,\n  // 가져오려는 시도를 하냐마냐는 상태\n  liePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unliePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommetLoading: false,\n  addCommetDone: false,\n  addCommetError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : init;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesError = null;\n        draft.uploadImagesDone = false;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagesPaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostError = null;\n        draft.likePostDone = false;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostError = null;\n        draft.unlikePostDone = false;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsError = null;\n        draft.loadPostsDone = false;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts); // 기존데이터랑 더미데이터 10개 불러와서 합쳐줌\n\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostError = null;\n        draft.addPostDone = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data); // 앞에다 추가해야 게시글 맨 앞에옴\n\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        draft.removePostDone = false;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentPostLoading = true;\n        draft.addCommentPostError = null;\n        draft.addCommentPostDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommetLoading = false;\n          draft.addCommetDone = true;\n          break;\n        }\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const psost = { ...state.mainPosts[postIndex] };\n      // psost.Comments = [dummyComment(action.data.content), ...psost.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = psost;\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommetLoading = false;\n        draft.addCommetError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/reducers/post.js"],"names":["React","produce","init","mainPosts","imagesPaths","hasMorePosts","liePostLoading","likePostDone","likePostError","unliePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommetLoading","addCommetDone","addCommetError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","likePostLoading","post","find","v","id","PostId","Likers","push","UserId","unlikePostLoading","filter","concat","length","unshift","addCommentPostLoading","addCommentPostError","addCommentPostDone","Comments"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport React from \"react\";\r\nimport produce from \"immer\";\r\n\r\nexport const init = {\r\n  mainPosts: [],\r\n  imagesPaths: [],\r\n  hasMorePosts: true, // 가져오려는 시도를 하냐마냐는 상태\r\n  liePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unliePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommetLoading: false,\r\n  addCommetDone: false,\r\n  addCommetError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = init, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesError = null;\r\n        draft.uploadImagesDone = false;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.imagesPaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostError = null;\r\n        draft.likePostDone = false;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostError = null;\r\n        draft.unlikePostDone = false;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsError = null;\r\n        draft.loadPostsDone = false;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts); // 기존데이터랑 더미데이터 10개 불러와서 합쳐줌\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.hasMorePosts = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostError = null;\r\n        draft.addPostDone = false;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data); // 앞에다 추가해야 게시글 맨 앞에옴\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostError = null;\r\n        draft.removePostDone = false;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter(\r\n          (v) => v.id !== action.data.PostId\r\n        );\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentPostLoading = true;\r\n        draft.addCommentPostError = null;\r\n        draft.addCommentPostDone = false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommetLoading = false;\r\n        draft.addCommetDone = true;\r\n        break;\r\n      }\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const psost = { ...state.mainPosts[postIndex] };\r\n      // psost.Comments = [dummyComment(action.data.content), ...psost.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = psost;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommetLoading = false;\r\n        draft.addCommetError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}