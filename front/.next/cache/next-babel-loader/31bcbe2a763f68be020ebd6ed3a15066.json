{"ast":null,"code":"/** @format */\nimport Axios from \"axios\";\nimport { all, call, put, takeLatest, fork, delay, throttle } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction AddPostAPI(data) {\n  return Axios.post(\"/post\", data);\n}\n\nfunction loadPostsAPI(data) {\n  return Axios.get(\"/posts\");\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(AddPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction RemovePostAPI(data) {\n  return Axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(RemovePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction CommentAPI(data) {\n  return Axios.post(`/post/${data.postId}/comment`, data); // Post /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(CommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return Axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return Axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return Axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return Axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/post.js"],"names":["Axios","all","call","put","takeLatest","fork","delay","throttle","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","AddPostAPI","data","post","loadPostsAPI","get","loadPost","action","result","type","e","console","error","response","addPost","id","RemovePostAPI","delete","removePost","CommentAPI","postId","addComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","retweetAPI","retweet","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport Axios from \"axios\";\r\nimport {\r\n  all,\r\n  call,\r\n  put,\r\n  takeLatest,\r\n  fork,\r\n  delay,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  generateDummyPost,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n} from \"../reducers/post\";\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction AddPostAPI(data) {\r\n  return Axios.post(\"/post\", data);\r\n}\r\nfunction loadPostsAPI(data) {\r\n  return Axios.get(\"/posts\");\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction RemovePostAPI(data) {\r\n  return Axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(RemovePostAPI, action.data);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction CommentAPI(data) {\r\n  return Axios.post(`/post/${data.postId}/comment`, data); // Post /post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(CommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return Axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return Axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return Axios.post(`/post/images`, data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n  return Axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}