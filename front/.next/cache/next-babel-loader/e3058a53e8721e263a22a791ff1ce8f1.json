{"ast":null,"code":"/** @format */\nimport Axios from \"axios\";\nimport { all, call, put, takeLatest, fork, delay, throttle } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction AddPostAPI(data) {\n  return Axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* loadPost(action) {\n  try {\n    // const result = yield call(AddPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10) // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: e.response.data\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(AddPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: e.response.data\n    });\n  }\n}\n\nfunction RemovePostAPI(data) {\n  return Axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(RemovePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: e.response.data\n    });\n  }\n}\n\nfunction CommentAPI(data) {\n  return Axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(CommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: e.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/post.js"],"names":["Axios","all","call","put","takeLatest","fork","delay","throttle","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","AddPostAPI","data","post","content","loadPost","action","id","generate","type","e","response","addPost","result","RemovePostAPI","delete","removePost","CommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport Axios from \"axios\";\r\nimport {\r\n  all,\r\n  call,\r\n  put,\r\n  takeLatest,\r\n  fork,\r\n  delay,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction AddPostAPI(data) {\r\n  return Axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    // const result = yield call(AddPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10), // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction RemovePostAPI(data) {\r\n  return Axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(RemovePostAPI, action.data);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction CommentAPI(data) {\r\n  return Axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(CommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}