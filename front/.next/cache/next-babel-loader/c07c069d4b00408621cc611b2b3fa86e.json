{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n/** @format */\nimport Axios from \"axios\";\nimport { all, call, put, takeLatest, fork, delay, throttle } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction AddPostAPI(data) {\n  return Axios.post(\"/post\", data);\n}\n\n_c = AddPostAPI;\n\nfunction loadPostsAPI(lastId) {\n  return Axios.get(\"/posts?lastId=\".concat(lastId));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(AddPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction RemovePostAPI(data) {\n  return Axios[\"delete\"](\"/post/\".concat(data));\n}\n\n_c2 = RemovePostAPI;\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(RemovePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction CommentAPI(data) {\n  return Axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // Post /post/1/comment\n}\n\n_c3 = CommentAPI;\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(CommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return Axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return Axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return Axios.post(\"/post/images\", data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction retweetAPI(data) {\n  return Axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AddPostAPI\");\n$RefreshReg$(_c2, \"RemovePostAPI\");\n$RefreshReg$(_c3, \"CommentAPI\");","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/post.js"],"names":["loadPost","addPost","removePost","addComment","likePost","unlikePost","uploadImages","retweet","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","postSaga","Axios","all","call","put","takeLatest","fork","delay","throttle","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","AddPostAPI","data","post","loadPostsAPI","lastId","get","action","result","type","console","error","response","id","RemovePostAPI","CommentAPI","postId","likePostAPI","patch","unlikePostAPI","uploadImagesAPI","retweetAPI"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport Axios from \"axios\";\r\nimport {\r\n  all,\r\n  call,\r\n  put,\r\n  takeLatest,\r\n  fork,\r\n  delay,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  generateDummyPost,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n} from \"../reducers/post\";\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction AddPostAPI(data) {\r\n  return Axios.post(\"/post\", data);\r\n}\r\nfunction loadPostsAPI(lastId) {\r\n  return Axios.get(`/posts?lastId=${lastId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction RemovePostAPI(data) {\r\n  return Axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(RemovePostAPI, action.data);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction CommentAPI(data) {\r\n  return Axios.post(`/post/${data.postId}/comment`, data); // Post /post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(CommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return Axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return Axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return Axios.post(`/post/images`, data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data, // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n  return Axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}