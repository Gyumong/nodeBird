{"ast":null,"code":"/** @format */\nimport React from \"react\";\nimport produce from \"immer\";\nexport const init = {\n  singlePost: null,\n  mainPosts: [],\n  imagesPaths: [],\n  hasMorePosts: true,\n  // 가져오려는 시도를 하냐마냐는 상태\n  liePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unliePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommetLoading: false,\n  addCommetDone: false,\n  addCommetError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = init, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagesPaths = draft.imagesPaths.filter((v, i) => i !== action.data);\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetError = null;\n      draft.retweetDone = false;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesError = null;\n      draft.uploadImagesDone = false;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagesPaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostError = null;\n      draft.likePostDone = false;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostError = null;\n      draft.unlikePostDone = false;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostError = null;\n      draft.loadPostDone = false;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.singlePost = action.data;\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsError = null;\n      draft.loadPostsDone = false;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n      draft.mainPosts = draft.mainPosts.concat(action.data); // 기존데이터랑 더미데이터 10개 불러와서 합쳐줌\n\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostError = null;\n      draft.addPostDone = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data); // 앞에다 추가해야 게시글 맨 앞에옴\n\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagesPaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostError = null;\n      draft.removePostDone = false;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentPostLoading = true;\n      draft.addCommentPostError = null;\n      draft.addCommentPostDone = false;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommetLoading = false;\n        draft.addCommetDone = true;\n        break;\n      }\n    // const postIndex = state.mainPosts.findIndex(\n    //   (v) => v.id === action.data.postId\n    // );\n    // const psost = { ...state.mainPosts[postIndex] };\n    // psost.Comments = [dummyComment(action.data.content), ...psost.Comments];\n    // const mainPosts = [...state.mainPosts];\n    // mainPosts[postIndex] = psost;\n    // return {\n    //   ...state,\n    //   mainPosts,\n    //   addCommentLoading: false,\n    //   addCommentDone: true,\n    // };\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommetLoading = false;\n      draft.addCommetError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/reducers/post.js"],"names":["React","produce","init","singlePost","mainPosts","imagesPaths","hasMorePosts","liePostLoading","likePostDone","likePostError","unliePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommetLoading","addCommetDone","addCommetError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","likePostLoading","post","find","id","PostId","Likers","push","UserId","unlikePostLoading","concat","length","addCommentPostLoading","addCommentPostError","addCommentPostDone","Comments"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport React from \"react\";\r\nimport produce from \"immer\";\r\n\r\nexport const init = {\r\n  singlePost: null,\r\n  mainPosts: [],\r\n  imagesPaths: [],\r\n  hasMorePosts: true, // 가져오려는 시도를 하냐마냐는 상태\r\n  liePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unliePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommetLoading: false,\r\n  addCommetDone: false,\r\n  addCommetError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\r\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\r\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = init, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case REMOVE_IMAGE:\r\n        draft.imagesPaths = draft.imagesPaths.filter(\r\n          (v, i) => i !== action.data\r\n        );\r\n\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetError = null;\r\n        draft.retweetDone = false;\r\n        break;\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesError = null;\r\n        draft.uploadImagesDone = false;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.imagesPaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostError = null;\r\n        draft.likePostDone = false;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostError = null;\r\n        draft.unlikePostDone = false;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostError = null;\r\n        draft.loadPostDone = false;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.singlePost = action.data;\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case LOAD_POSTS_REQUEST:\r\n      case LOAD_USER_POSTS_REQUEST:\r\n      case LOAD_HASHTAG_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsError = null;\r\n        draft.loadPostsDone = false;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n      case LOAD_USER_POSTS_SUCCESS:\r\n      case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.concat(action.data); // 기존데이터랑 더미데이터 10개 불러와서 합쳐줌\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.hasMorePosts = action.data.length === 10;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n      case LOAD_USER_POSTS_FAILURE:\r\n      case LOAD_HASHTAG_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostError = null;\r\n        draft.addPostDone = false;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data); // 앞에다 추가해야 게시글 맨 앞에옴\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.imagesPaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostError = null;\r\n        draft.removePostDone = false;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter(\r\n          (v) => v.id !== action.data.PostId\r\n        );\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentPostLoading = true;\r\n        draft.addCommentPostError = null;\r\n        draft.addCommentPostDone = false;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommetLoading = false;\r\n        draft.addCommetDone = true;\r\n        break;\r\n      }\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const psost = { ...state.mainPosts[postIndex] };\r\n      // psost.Comments = [dummyComment(action.data.content), ...psost.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = psost;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommetLoading = false;\r\n        draft.addCommetError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}