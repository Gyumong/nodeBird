{"ast":null,"code":"/** @format */\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\n\nfunction followApi() {\n  return axios.post(\"/api/follow\");\n}\n\nfunction unfollowApi() {\n  return axios.post(\"/api/unfollow\");\n}\n\nfunction logInAPI(data) {\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\n  return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\n}\n\nfunction* logIn(action) {\n  // 액션을 받음\n  try {\n    const result = yield call(logInAPI, action.data); // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\n\n    yield put({\n      // 액션을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n  // 로그아웃은 데이터 받을 필요 없음\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction loadUserAPI() {\n  return axios.get(\"/user\");\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 액션이 들어오면 logIn 제너레이터 함수를 실행, 요청이 들어오면 두번재 인자 함수에 액션을 넘김\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_MY_INFO_REQUEST","followApi","post","unfollowApi","logInAPI","data","logIn","action","result","type","e","error","response","logOutAPI","logOut","signUpAPI","signUp","console","log","follow","unfollow","loadUserAPI","get","loadUser","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnfollow","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  LOAD_MY_INFO_REQUEST,\r\n} from \"../reducers/user\";\r\nfunction followApi() {\r\n  return axios.post(\"/api/follow\");\r\n}\r\nfunction unfollowApi() {\r\n  return axios.post(\"/api/unfollow\");\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  // data를 받음 ex) {id:'abc@naver.com',password:'123456'}\r\n  return axios.post(\"/user/login\", data); // 받은 data를 토대로 서버에 요청을 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 액션을 받음\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    // 요청이 성공이면 call로 logInAPI를 실행하고 결괏값을 변수 result에 저장\r\n    // fork는 비동기 call은 동기 => async await 함수 비슷 결괏값 받으면 실행 ㅇㅇ\r\n    // action에서 data를 꺼내서 logInAPI 함수에 인자로 보냄\r\n    yield put({\r\n      // 액션을 dispatch\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/user/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  // 로그아웃은 데이터 받을 필요 없음\r\n  try {\r\n    const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* follow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadUserAPI() {\r\n  return axios.get(\"/user\");\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n  // 액션이 들어오면 logIn 제너레이터 함수를 실행, 요청이 들어오면 두번재 인자 함수에 액션을 넘김\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadUser),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}