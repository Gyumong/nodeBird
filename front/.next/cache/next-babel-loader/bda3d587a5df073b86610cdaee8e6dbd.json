{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n/** @format */\nimport Axios from \"axios\";\nimport { all, call, put, takeLatest, fork, delay, throttle } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction AddPostAPI(data) {\n  return Axios.post(\"/post\", {\n    content: data\n  });\n}\n\n_c = AddPostAPI;\n\nfunction loadPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result = yield call(AddPostAPI, action.data);\n          id = shortid.generate();\n          _context.next = 4;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10) // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\n\n          });\n\n        case 4:\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 10;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(AddPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction RemovePostAPI(data) {\n  return Axios[\"delete\"](\"/api/post\", data);\n}\n\n_c2 = RemovePostAPI;\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction CommentAPI(data) {\n  return Axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // Post /post/1/comment\n}\n\n_c3 = CommentAPI;\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(CommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AddPostAPI\");\n$RefreshReg$(_c2, \"RemovePostAPI\");\n$RefreshReg$(_c3, \"CommentAPI\");","map":{"version":3,"sources":["C:/Users/82104/OneDrive/바탕 화면/project/nodebird/front/sagas/post.js"],"names":["loadPost","addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","postSaga","Axios","all","call","put","takeLatest","fork","delay","throttle","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","AddPostAPI","data","post","content","action","id","generate","type","response","result","RemovePostAPI","CommentAPI","postId"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport Axios from \"axios\";\r\nimport {\r\n  all,\r\n  call,\r\n  put,\r\n  takeLatest,\r\n  fork,\r\n  delay,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction AddPostAPI(data) {\r\n  return Axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    // const result = yield call(AddPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10), // 리듀서에서 만든 더미포스트 함수를 가져와서 10개를 요청 성공시 만들어준다.\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction RemovePostAPI(data) {\r\n  return Axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(RemovePostAPI, action.data);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction CommentAPI(data) {\r\n  return Axios.post(`/post/${data.postId}/comment`, data); // Post /post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(CommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}