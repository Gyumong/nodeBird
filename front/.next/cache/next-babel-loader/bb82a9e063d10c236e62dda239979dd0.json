{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\n/**\r\n * /* eslint-disable no-unused-vars\r\n *\r\n * @format\r\n */\n\n/* eslint-disable import/newline-after-import */\n\n/* eslint-disable import/order */\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport Head from \"next/head\";\nimport useInput from \"../hooks/useInput\";\nimport { Form, Input, Checkbox, Button } from \"antd\";\nimport styled from \"styled-components\";\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { END } from \"redux-saga\";\nimport wrapper from \"../store/configureStore\";\nimport Axios from \"axios\";\nconst ErrorMessage = styled.div.withConfig({\n  displayName: \"signup__ErrorMessage\",\n  componentId: \"sc-1oeks01-0\"\n})([\"color:red;\"]);\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput(\"\");\n  const [nickname, onChangeNickname] = useInput(\"\");\n  const [password, onChangePassword] = useInput(\"\");\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState(\"\");\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    signUpLoading,\n    signUpDone,\n    signUpError\n  } = useSelector(state => state.user);\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordCheck(e.target.value);\n    setPasswordError(e.target.value !== password);\n  }, [password]);\n  const {\n    0: term,\n    1: setTerm\n  } = useState(\"\");\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  useEffect(() => {\n    if (signUpDone) {\n      Router.push(\"/\");\n    }\n  }, [signUpDone]);\n  useEffect(() => {\n    if (signUpError) {\n      alert(signUpError);\n    }\n  }, [signUpError]);\n  const onChangeTerm = useCallback(e => {\n    setTerm(e.target.checked);\n    setTermError(false);\n  }, []);\n  const onSubmit = useCallback(() => {\n    if (password !== passwordCheck) {\n      return setPasswordError(true);\n    }\n\n    if (!term) {\n      return setTermError(true);\n    }\n\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        email,\n        password,\n        nickname\n      }\n    });\n    console.log(email, nickname, password);\n  }, [password, passwordCheck, term]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(AppLayout, {\n      children: [/*#__PURE__*/_jsx(Head, {\n        children: /*#__PURE__*/_jsx(\"title\", {\n          children: \"\\uD68C\\uC6D0\\uAC00\\uC785 | NodeBird\"\n        })\n      }), /*#__PURE__*/_jsxs(Form, {\n        onFinish: onSubmit,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"user-email\",\n            children: \"\\uC774\\uBA54\\uC77C\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"user-email\",\n            value: email,\n            onChange: onChangeEmail,\n            type: \"email\",\n            required: true\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"user-nickname\",\n            children: \"\\uB2C9\\uB124\\uC784\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"user-nickname\",\n            value: nickname,\n            onChange: onChangeNickname,\n            required: true\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"user-password\",\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"user-password\",\n            type: \"password\",\n            value: password,\n            onChange: onChangePassword,\n            required: true\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"user-password-check\",\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uCCB4\\uD06C\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"user-password-check\",\n            type: \"password\",\n            value: passwordCheck,\n            onChange: onChangePasswordCheck,\n            required: true\n          }), passwordError && /*#__PURE__*/_jsx(ErrorMessage, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(Checkbox, {\n            name: \"user-term\",\n            checked: term,\n            onChange: onChangeTerm,\n            children: \"\\uB9D0 \\uC798\\uB4E4\\uAC83\\uC744 \\uB3D9\\uC758 \\uD569\\uB2C8\\uB2E4.\"\n          }), termError && /*#__PURE__*/_jsx(ErrorMessage, {\n            children: \"\\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD558\\uC154\\uC57C \\uD569\\uB2C8\\uB2E4.\"\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            marginTop: \"10px\"\n          },\n          children: /*#__PURE__*/_jsx(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            loading: signUpLoading,\n            children: \"\\uAC00\\uC785\\uD558\\uAE30\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  Axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    Axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    // 페이지 접속시 사용자 정보 불러옴\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}